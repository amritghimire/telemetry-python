{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Iterative Telemetry API Reference","title":"Welcome to Iterative Telemetry"},{"location":"#welcome-to-iterative-telemetry","text":"API Reference","title":"Welcome to Iterative Telemetry"},{"location":"reference/iterative_telemetry/","text":"Iterative Telemetry. IterativeTelemetryLogger Source code in iterative_telemetry/__init__.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 class IterativeTelemetryLogger : def __init__ ( self , tool_name , tool_version , enabled : Union [ bool , Callable ] = True , url = URL , token = TOKEN , debug : bool = False , ): self . tool_name = tool_name self . tool_version = tool_version self . enabled = enabled self . url = url self . token = token self . debug = debug if self . debug : logger . setLevel ( logging . DEBUG ) logger . debug ( \"IterativeTelemetryLogger is in debug mode\" ) def send_cli_call ( self , cmd_name : str , error : str = None , ** kwargs ): self . send_event ( \"cli\" , cmd_name , error = error , ** kwargs ) def send_event ( self , interface : str , action : str , error : str = None , use_thread : bool = False , use_daemon : bool = True , ** kwargs , ): self . send ( { \"interface\" : interface , \"action\" : action , \"error\" : error , \"extra\" : kwargs , }, use_thread = use_thread , use_daemon = use_daemon , ) def is_enabled ( self ): return ( os . environ . get ( DO_NOT_TRACK_ENV , None ) is None and self . enabled () if callable ( self . enabled ) else self . enabled and find_or_create_user_id () is not None ) def send ( self , payload : Dict [ str , Any ], use_thread : bool = False , use_daemon : bool = True , ): if not self . is_enabled (): return payload . update ( self . _runtime_info ()) if use_thread and use_daemon : raise ValueError ( \"use_thread and use_daemon cannot be true at the same time\" ) logger . debug ( \"Sending payload %s \" , payload ) impl = self . _send if use_daemon : impl = self . _send_daemon if use_thread : impl = self . _send_thread impl ( payload ) def _send_daemon ( self , payload ): cmd = ( f \"import requests;requests.post(' { self . url } ',\" f \"params= {{ 'token':' { self . token } ' }} ,json= { payload } )\" ) if os . name == \"nt\" : from subprocess import ( CREATE_NEW_PROCESS_GROUP , CREATE_NO_WINDOW , STARTF_USESHOWWINDOW , STARTUPINFO , ) detached_flags = CREATE_NEW_PROCESS_GROUP | CREATE_NO_WINDOW startupinfo = STARTUPINFO () startupinfo . dwFlags |= STARTF_USESHOWWINDOW subprocess . Popen ( # pylint: disable=consider-using-with [ sys . executable , \"-c\" , cmd ], creationflags = detached_flags , close_fds = True , startupinfo = startupinfo , ) elif os . name == \"posix\" : subprocess . Popen ( # pylint: disable=consider-using-with [ sys . executable , \"-c\" , cmd ], close_fds = True , ) else : raise NotImplementedError def _send_thread ( self , payload ): Thread ( target = self . _send , args = [ payload ]) . start () def _send ( self , payload ): try : requests . post ( self . url , params = { \"token\" : self . token }, json = payload , timeout = 2 ) except Exception : # pylint: disable=broad-except logger . debug ( \"failed to send analytics report\" , exc_info = True ) def _runtime_info ( self ): \"\"\" Gather information from the environment where DVC runs to fill a report \"\"\" return { \"tool_name\" : self . tool_name , \"tool_version\" : self . tool_version , # \"tool_source\": self.tool_source, # TODO # \"scm_class\": _scm_in_use(), ** _system_info (), \"user_id\" : find_or_create_user_id (), \"group_id\" : \"\" , # TODO } _runtime_info () Gather information from the environment where DVC runs to fill a report Source code in iterative_telemetry/__init__.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def _runtime_info ( self ): \"\"\" Gather information from the environment where DVC runs to fill a report \"\"\" return { \"tool_name\" : self . tool_name , \"tool_version\" : self . tool_version , # \"tool_source\": self.tool_source, # TODO # \"scm_class\": _scm_in_use(), ** _system_info (), \"user_id\" : find_or_create_user_id (), \"group_id\" : \"\" , # TODO } _generate_id () A randomly generated ID string Source code in iterative_telemetry/__init__.py 190 191 192 def _generate_id (): \"\"\"A randomly generated ID string\"\"\" return str ( uuid . uuid4 ()) # TODO: CI env-based ID find_or_create_user_id () cached The user's ID is stored on a file under the global config directory. The file should contain a JSON with a \"user_id\" key: {\"user_id\": \"16fd2706-8baf-433b-82eb-8c7fada847da\"} IDs are generated randomly with UUID4. Source code in iterative_telemetry/__init__.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 @lru_cache ( None ) def find_or_create_user_id (): \"\"\" The user's ID is stored on a file under the global config directory. The file should contain a JSON with a \"user_id\" key: {\"user_id\": \"16fd2706-8baf-433b-82eb-8c7fada847da\"} IDs are generated randomly with UUID4. \"\"\" config_file = Path ( user_config_dir ( os . path . join ( \"iterative\" , \"telemetry\" ), False ) ) config_file . parent . mkdir ( mode = 0o755 , parents = True , exist_ok = True ) lockfile = str ( config_file . with_suffix ( \".lock\" )) # DVC backwards-compatibility config_file_old = Path ( user_config_dir ( os . path . join ( \"dvc\" , \"user_id\" ), \"iterative\" ) ) try : with FileLock ( # pylint: disable=abstract-class-instantiated lockfile , timeout = 5 ): user_id = _read_user_id ( config_file ) if user_id is None : try : user_id = _read_user_id_locked ( config_file_old ) except Timeout : logger . debug ( \"Failed to acquire %s \" , config_file_old . with_suffix ( \".lock\" ), ) return None if user_id is None : user_id = _generate_id () with config_file . open ( mode = \"w\" , encoding = \"utf8\" ) as fobj : json . dump ({ \"user_id\" : user_id }, fobj ) except Timeout : logger . debug ( \"Failed to acquire %s \" , lockfile ) return user_id if user_id . lower () != DO_NOT_TRACK_VALUE . lower () else None","title":"Iterative telemetry"},{"location":"reference/iterative_telemetry/#iterative_telemetry.IterativeTelemetryLogger","text":"Source code in iterative_telemetry/__init__.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 class IterativeTelemetryLogger : def __init__ ( self , tool_name , tool_version , enabled : Union [ bool , Callable ] = True , url = URL , token = TOKEN , debug : bool = False , ): self . tool_name = tool_name self . tool_version = tool_version self . enabled = enabled self . url = url self . token = token self . debug = debug if self . debug : logger . setLevel ( logging . DEBUG ) logger . debug ( \"IterativeTelemetryLogger is in debug mode\" ) def send_cli_call ( self , cmd_name : str , error : str = None , ** kwargs ): self . send_event ( \"cli\" , cmd_name , error = error , ** kwargs ) def send_event ( self , interface : str , action : str , error : str = None , use_thread : bool = False , use_daemon : bool = True , ** kwargs , ): self . send ( { \"interface\" : interface , \"action\" : action , \"error\" : error , \"extra\" : kwargs , }, use_thread = use_thread , use_daemon = use_daemon , ) def is_enabled ( self ): return ( os . environ . get ( DO_NOT_TRACK_ENV , None ) is None and self . enabled () if callable ( self . enabled ) else self . enabled and find_or_create_user_id () is not None ) def send ( self , payload : Dict [ str , Any ], use_thread : bool = False , use_daemon : bool = True , ): if not self . is_enabled (): return payload . update ( self . _runtime_info ()) if use_thread and use_daemon : raise ValueError ( \"use_thread and use_daemon cannot be true at the same time\" ) logger . debug ( \"Sending payload %s \" , payload ) impl = self . _send if use_daemon : impl = self . _send_daemon if use_thread : impl = self . _send_thread impl ( payload ) def _send_daemon ( self , payload ): cmd = ( f \"import requests;requests.post(' { self . url } ',\" f \"params= {{ 'token':' { self . token } ' }} ,json= { payload } )\" ) if os . name == \"nt\" : from subprocess import ( CREATE_NEW_PROCESS_GROUP , CREATE_NO_WINDOW , STARTF_USESHOWWINDOW , STARTUPINFO , ) detached_flags = CREATE_NEW_PROCESS_GROUP | CREATE_NO_WINDOW startupinfo = STARTUPINFO () startupinfo . dwFlags |= STARTF_USESHOWWINDOW subprocess . Popen ( # pylint: disable=consider-using-with [ sys . executable , \"-c\" , cmd ], creationflags = detached_flags , close_fds = True , startupinfo = startupinfo , ) elif os . name == \"posix\" : subprocess . Popen ( # pylint: disable=consider-using-with [ sys . executable , \"-c\" , cmd ], close_fds = True , ) else : raise NotImplementedError def _send_thread ( self , payload ): Thread ( target = self . _send , args = [ payload ]) . start () def _send ( self , payload ): try : requests . post ( self . url , params = { \"token\" : self . token }, json = payload , timeout = 2 ) except Exception : # pylint: disable=broad-except logger . debug ( \"failed to send analytics report\" , exc_info = True ) def _runtime_info ( self ): \"\"\" Gather information from the environment where DVC runs to fill a report \"\"\" return { \"tool_name\" : self . tool_name , \"tool_version\" : self . tool_version , # \"tool_source\": self.tool_source, # TODO # \"scm_class\": _scm_in_use(), ** _system_info (), \"user_id\" : find_or_create_user_id (), \"group_id\" : \"\" , # TODO }","title":"IterativeTelemetryLogger"},{"location":"reference/iterative_telemetry/#iterative_telemetry.IterativeTelemetryLogger._runtime_info","text":"Gather information from the environment where DVC runs to fill a report Source code in iterative_telemetry/__init__.py 145 146 147 148 149 150 151 152 153 154 155 156 157 158 def _runtime_info ( self ): \"\"\" Gather information from the environment where DVC runs to fill a report \"\"\" return { \"tool_name\" : self . tool_name , \"tool_version\" : self . tool_version , # \"tool_source\": self.tool_source, # TODO # \"scm_class\": _scm_in_use(), ** _system_info (), \"user_id\" : find_or_create_user_id (), \"group_id\" : \"\" , # TODO }","title":"_runtime_info()"},{"location":"reference/iterative_telemetry/#iterative_telemetry._generate_id","text":"A randomly generated ID string Source code in iterative_telemetry/__init__.py 190 191 192 def _generate_id (): \"\"\"A randomly generated ID string\"\"\" return str ( uuid . uuid4 ()) # TODO: CI env-based ID","title":"_generate_id()"},{"location":"reference/iterative_telemetry/#iterative_telemetry.find_or_create_user_id","text":"The user's ID is stored on a file under the global config directory. The file should contain a JSON with a \"user_id\" key: {\"user_id\": \"16fd2706-8baf-433b-82eb-8c7fada847da\"} IDs are generated randomly with UUID4. Source code in iterative_telemetry/__init__.py 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 @lru_cache ( None ) def find_or_create_user_id (): \"\"\" The user's ID is stored on a file under the global config directory. The file should contain a JSON with a \"user_id\" key: {\"user_id\": \"16fd2706-8baf-433b-82eb-8c7fada847da\"} IDs are generated randomly with UUID4. \"\"\" config_file = Path ( user_config_dir ( os . path . join ( \"iterative\" , \"telemetry\" ), False ) ) config_file . parent . mkdir ( mode = 0o755 , parents = True , exist_ok = True ) lockfile = str ( config_file . with_suffix ( \".lock\" )) # DVC backwards-compatibility config_file_old = Path ( user_config_dir ( os . path . join ( \"dvc\" , \"user_id\" ), \"iterative\" ) ) try : with FileLock ( # pylint: disable=abstract-class-instantiated lockfile , timeout = 5 ): user_id = _read_user_id ( config_file ) if user_id is None : try : user_id = _read_user_id_locked ( config_file_old ) except Timeout : logger . debug ( \"Failed to acquire %s \" , config_file_old . with_suffix ( \".lock\" ), ) return None if user_id is None : user_id = _generate_id () with config_file . open ( mode = \"w\" , encoding = \"utf8\" ) as fobj : json . dump ({ \"user_id\" : user_id }, fobj ) except Timeout : logger . debug ( \"Failed to acquire %s \" , lockfile ) return user_id if user_id . lower () != DO_NOT_TRACK_VALUE . lower () else None","title":"find_or_create_user_id()"}]}